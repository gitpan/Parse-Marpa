=head1 NAME

Parse::Marpa::RAW - Marpa's Raw Grammar Interface

=head1 THIS DOCUMENT IS UNDER CONSTRUCTION AND INCOMPLETE

    THIS DOCUMENT IS UNDER CONSTRUCTION AND INCOMPLETE

=head1 OVERVIEW

This document describes Marpa's Raw Grammar Interface.
It is the low-level interface used by all others.
It also can be used directly, as described below.

The Raw Grammar Interface is a short list of method options to the
C<Parse::Marpa::new()>,
C<Parse::Marpa::set()>,
and C<Parse::Marpa::Parse::new()> methods.

Marpa does not allow use of both the raw interface and a high level interface
in building the same grammar, with minor exceptions as described below.
Marpa throws an exception if the user attempts to build the same grammar using
both kinds of interface.

=head1 RAW INTERFACE SYMBOL NAMES

Each interface is allowed to use it's own rules for symbol names.
The raw interface's conventions are basic,
and designed to impose the fewest restrictions on higher levels.

Any valid Perl string not ending in a right square bracket is an acceptable name.
Symbols whose names end in right square brackets are reserved for Marpa internal use.
Appending a space or an underscore to a name makes it acceptable.

Unlike MDL, raw interface symbols are not considered the same unless their names
match exactly.
Unless states otherwise, any reference to a "symbol name" in this document
means its raw interface symbol name.

=head1 THE RULES METHOD OPTION

The C<rules> option is available with both C<Parse::Marpa::new()>
and C<Parse::Marpa::set()>.
The C<rules> option may be specified multiple times, adding new rules
to the grammar each time.
New rules may continue to be added until the grammar is precomputed.

The value of the rules option must be a reference to an array,
and each element of the array must be a reference to a description of a rule.
Rule descriptions can be either "short form" (in which case they are arrays)
or "long form" (in which case they are hashes).

=head2 Short Form Rules

The short form description of a rule is an array with 4 elements,
the last two of which are optional.
The first element must be the name of the left hand side symbol.
The second element must be a reference to an array of names of right hand side symbol names.
In the case of an empty rule, the right hand side symbol array may be zero length.

The next two element of the short form rule array are optional.
The third element, if present, must be a string describing the rule's action
in the current Marpa semantics.  Right now, the only available semantics is Perl 5.
If undefined, the "default action" will be used.  The default action is a Marpa predefined,
and can be reset.

The fourth and last element, if present, must be an integer, although it can be negative.
It will be the priority of the rule.
If undefined, a rule's priority defaults to zero.

=head2 Long Form Rules

The long form description of a rule is a hash,
which is treated as I<option>, I<value> pairs.
The available long form rules options are:

=over 4

=item lhs, rhs action and priority

The values of the C<lhs>, C<rhs>, C<action> and C<priority> rules options
follow the same rules as for the corresponding elements of the short form array description,
described above.

=item min and max

The values of the C<min> and <max> options must be non-negative integers.
C<max> cannot be zero, and must be greater than or equal to C<min>.
One or both may be undefined.
C<min> and C<max> allow the definition of sequence productions.
For a somewhat tutorial introduction to these see the L<MDL document|Parse::Marpa::LANGUAGE>.

If C<max> is defined C<min> must be as well.
If C<min> and C<max> are both undefined, or both 1,
the rule is not a sequence production, but an ordinary BNF production.

Otherwise, the rule is a sequence production,
only be one symbol is allowed on the right hand side
and it is repeated according to C<min> and C<max>.
The right hand side symbol is not allowed be a nullable symbol,
because that is confusing when it comes to counting parses.

Specifying a nullable symbol for the right hand side of a sequence is usually a mistake.
Where it is not,
the intended syntax can be implemented with BNF productions.

If both C<min> and C<max> are defined and greater than one, the rule is a "counted" sequence,
and the right hand side symbol may be repeated anywhere from C<min> to C<max> times.
If C<max> is not defined, the rule is a potentially infinite sequence where the right hand side
must be repeated at least C<min> times.

=item separator

Any sequence production may have a C<separator> defined.
The value must be a symbol name.
Marpa allows trailing separators, Perl style.
The separator is not allowed be a nullable symbol,
because that is confusing when it comes to counting parses.

Specifying a nullable symbol for a sequence is usually a mistake.
Where it is not,
the intended syntax should be implemented with BNF productions.

=back

=head1 THE TERMINALS METHOD OPTION

The value of the terminals option must be a reference to an array of references to terminal descriptions.
Terminal descriptions are arrays of two elements.
The first element is the symbol name for the terminal.
The second element must be a reference to a hash of terminals suboptions,
as I<option>, I<value> pairs.

=head2 Suboptions for the C<terminals> option.

=over 4

=item regex

The value of the regex suboption must be a regular expression.
It will be use to match the terminal in the input stream.

Only one of the regex and action suboptions may be specified.
See <the MDL document|Parse::Marpa::Language> for details on writing regexes.

=item action

The value of the action suboption must be a string with code in the current semantics.
Right now the only available semantics is Perl 5.
The lex action will be used to match the terminal in the input stream.

Only one of the regex and action suboptions may be specified.
See <the MDL document|Parse::Marpa::Language> for details on writing lex actions.

=item prefix

The value of the prefix suboption must be a regular expression.
It will be used to match and discard text from the input stream
before attempting to match the terminal itself.
The most common use is to discard leading whitespace.

=item priority

The value of the priority suboption must be an integer.
It can be negative.
It will control the order in which terminal matches are attempted.

=back

=head1 THE START OPTION

The value of the start option must be a raw interface symbol name.
It will be used as the start symbol for the grammar.
Unlike most of the raw interface options, which may not be used
in combination with a high-level interface or the C<source> option,
The <start> option may be used to set the default for, or override
the choice of, start symbol in a high-level interface grammar.

If you use the C<start> option to specify a symbol from a high-level
grammar, you must be careful to use the raw interface symbol name,
converting it if necessary.
The documentation for the high-level interface should describe how
its symbol names can be converted to raw interface symbol names.
