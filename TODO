* Write unified "counted rule" subroutine

* First-rest sequences for efficiency.  Ability to specify flat lists?

* Allow closures for lexing

* Speed-up for pre-computing lexables.  Grammar::LEXABLES, etc.

* Test lexing suffixes

* Allow macros:
     @VALUE
     $VALUE_REF
     $VALUE[n]
     $VALUE{NAME}
     $VALUE{NAME}[n]
     @RULE
     $RULE_REF

* Prohibit nullable symbols on rhs of counted production

* (Someday) precedence declarations, a la yacc

* (Later) Look at Yacc macros yyerrok YYERROR YYACCEPT YYABORT YYRECOVERING

* (Later) Look at error recovery.   Is anything in Parse::Yapp or yacc useful?
