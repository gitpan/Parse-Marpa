#!/bin/env perl
use 5.010_000;
use strict;
use warnings;

use Carp;
use Getopt::Long;
use Parse::Marpa;
use English qw( -no_match_vars ) ;
use Fatal qw(open close);

my $command = shift;
my $grammar_file;
my $compiled_grammar_file;
my $text_to_parse;
my $inaccessible_symbols;
my $accessible_symbols;
my $nullable_symbols;
my $nulling_symbols;
my $unproductive_symbols;
my $productive_symbols;
my $trace_actions;
my $trace_lex;
my $trace_priorities;
my $trace_values;
my $show_NFA;
my $show_QDFA;
my $show_bocage_flag;
my $show_earley_sets;
my $show_problems;
my $show_rules;
my $show_symbols;
my $show_tree_flag;
my $stdout;
my $all_parses;
my %options;
my %source_options;

given ($command) {
    when ('compile') {
        croak unless GetOptions( "option=s" => \%options );
        do_compile();
    }
    when ('parse') {
        croak
            unless GetOptions(
            "grammar=s"            => \$grammar_file,
            "compiled_grammar=s"   => \$compiled_grammar_file,
            "text=s"               => \$text_to_parse,
            "QDFA"                 => \$show_QDFA,
            "NFA"                  => \$show_NFA,
            "bocage:i"             => \$show_bocage_flag,
            "inaccessible_symbols" => \$inaccessible_symbols,
            "accessible_symbols"   => \$accessible_symbols,
            "nullable_symbols"     => \$nullable_symbols,
            "nulling_symbols"      => \$nulling_symbols,
            "unproductive_symbols" => \$unproductive_symbols,
            "productive_symbols"   => \$productive_symbols,
            "trace_actions"        => \$trace_actions,
            "trace_values"         => \$trace_values,
            "trace_priorities"     => \$trace_priorities,
            "trace_lex"            => \$trace_lex,
            "rules"                => \$show_rules,
            "problems"             => \$show_problems,
            "symbols"              => \$show_symbols,
            "earley_sets"          => \$show_earley_sets,
            "tree:i"               => \$show_tree_flag,
            "source_option=s"      => \%source_options,
	    "stdout"               => \$stdout,
            "all_parses"           => \$all_parses,
            "option=s"             => \%options,
            );

	if ($trace_actions) {
	    $options{trace_actions} = 1;
	}

	if ($trace_lex) {
	    $options{trace_lex} = 1;
	}

	if ($trace_priorities) {
	    $options{trace_priorities} = 1;
	}

	if ($trace_values) {
	    $options{trace_values} = 1;
	}

	# should I set it up so that it takes effect before other
	# traces are set?
	if ($stdout) {
	    $options{trace_file_handle} = \*STDOUT;
	}

        do_parse();

    }
    default {
        croak("Unimplemented marpa command: $command");
    }
}

sub do_compile {
    my $grammar_source;
    { local ($RS) = undef; $grammar_source = <STDIN>; }

    my $grammar = new Parse::Marpa(
        {   mdl_source => \$grammar_source,
            %options
        }
    );

    $grammar->precompute();
    my $compiled_grammar = $grammar->compile();
    print $$compiled_grammar;
}

sub do_parse {

    my $grammar;
    if ( defined $compiled_grammar_file ) {
        croak("Compiled grammars not implemented");

        # open(GRAMMAR, "<", $compiled_grammar_file);
        # my $compiled_grammar; { local($RS) = undef; $compiled_grammar = <GRAMMAR>; }
        # $grammar = Parse::Marpa::Grammar::decompile($compiled_grammar);
    }
    elsif ( defined $grammar_file ) {
        our $GRAMMAR;
        open( GRAMMAR, "<", $grammar_file );
        my $grammar_source;
        { local ($RS) = undef; $grammar_source = <GRAMMAR>; }
        eval {
            $grammar = new Parse::Marpa::Grammar( {%options} );
            $grammar->set(
                {   mdl_source     => \$grammar_source,
                    source_options => \%source_options,
                }
            );
        };
        if ($@) {
            die( "Parse of $grammar_file failed:\n", $@ );
        }
        %options = ();
    }
    else {
        croak("No grammar specified");
    }

    $grammar->precompute();

    if ($show_symbols) {
        print $grammar->show_symbols();
    }

    if ($show_rules) {
        print $grammar->show_rules();
    }

    if ($show_problems) {
        print $grammar->show_problems();
    }

    if ($show_NFA) {
        print $grammar->show_NFA();
    }

    if ($show_QDFA) {
        print $grammar->show_QDFA();
    }

    if ($accessible_symbols) {
        say "Accessible symbols: ", $grammar->show_accessible_symbols();
    }

    if ($inaccessible_symbols) {
        for my $symbol ( @{ $grammar->inaccessible_symbols() } ) {
            say "Inaccessible symbol: ", $symbol;
        }
    }

    if ($nullable_symbols) {
        say "Nullable symbols: ", $grammar->show_nullable_symbols();
    }

    if ($nulling_symbols) {
        say "Nulling symbols: ", $grammar->show_nulling_symbols();
    }

    if ($productive_symbols) {
        say "Productive symbols: ", $grammar->show_productive_symbols();
    }

    if ($unproductive_symbols) {
        for my $symbol ( @{ $grammar->unproductive_symbols() } ) {
            say "Unproductive symbol: ", $symbol;
        }
    }

    my $recce = new Parse::Marpa::Recognizer( { grammar => $grammar } );
    if ( not defined $text_to_parse ) {
        local ($RS) = undef;
        $text_to_parse = <STDIN>;
    }

    my $fail_location = $recce->text( \$text_to_parse );

    if ($show_earley_sets) {
	# end_input() not yet run
	# do that here?
	print $recce->show_earley_sets;
    }

    if ( $fail_location >= 0 ) {
        print STDERR Parse::Marpa::show_location( "Parsing failed",
            \$text_to_parse, $fail_location );
        exit 1;
    }

    my $evaler = new Parse::Marpa::Evaluator($recce);
    if (not $evaler) {
	say STDERR "Input not recognized by grammar";
	exit 1;
    }

    if (defined $show_bocage_flag) {
	print $evaler->show_bocage($show_bocage_flag);
    }

    my $parse_count = 0;
    PARSE: while (1) {

        my $value = $evaler->value();
        if ( not defined $value ) {
            croak 'No parse' unless $parse_count > 0;
            return;
        }
        $parse_count++;

        given (${$value}) {
            when (undef) { say 'Marpa returned an undefined' }
            default      { say $_ };
        }

        if (defined $show_tree_flag) {
            print $evaler->show_tree($show_tree_flag);
        }

        last PARSE unless $all_parses;

    }    # while (1)

}
